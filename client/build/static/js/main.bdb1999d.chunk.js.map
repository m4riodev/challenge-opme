{"version":3,"sources":["components/Home.js","components/Users.js","components/User.js","components/App.js","serviceWorker.js","index.js"],"names":["login","a","fetch","Home","style","paddingTop","textAlign","onClick","Button","icon","primary","size","labelPosition","Icon","name","Users","params","useParams","page","useState","users","setUsers","getUsers","since","response","json","body","status","Error","message","useEffect","length","Segment","marginTop","Item","Group","divided","as","padding","map","value","index","key","Image","src","avatar_url","Content","verticalAlign","Header","Extra","id","Link","to","basic","color","floated","parseInt","window","scrollTo","secondary","Dimmer","active","inverted","Loader","User","username","user","setUser","getUser","console","log","Card","centered","wrapped","ui","Meta","className","format","created_at","Description","bio","extra","location","company","html_url","href","target","blog","twitter_username","App","Container","minHeight","path","children","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bdb1999d.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\n\nconst login = async () => {\n  await fetch('/api/auth');\n}\n\nconst Home = () => { \n  return (\n    <div style={{paddingTop: '50px', textAlign: 'center'}} onClick={() => login()}>\n      <Button icon primary  size='massive' labelPosition='left'>\n        <Icon name='github alternate' />Log with GitHub\n      </Button>\n    </div>\n  )\n}\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Segment, Dimmer, Loader, Item, Icon, Button } from 'semantic-ui-react';\n\nconst Users = () => {\n  const params = useParams();\n  const page = params.page ? params.page : 1;\n  const [users, setUsers] = useState([]);\n  \n  const getUsers = async () => {\n    await fetch('/api/auth');\n    \n    const since = ((page ? page : 1) - 1) * 30;\n    const response = await fetch(`/api/users/${since}`);\n    const body = await response.json();\n    \n    if (response.status !== 200) throw Error(body.message);\n    \n    setUsers(body);\n  }\n\n  useEffect(() => { getUsers() }); \n  \n  if(users.length > 0){\n    return (\n      <>\n        <Segment style={{marginTop: '50px'}}>\n          <Item.Group divided as=\"ul\" style={{padding: 0}}>\n            { users.map((value, index) => (\n              <Item key={index} as=\"li\">\n                <Item.Image size=\"tiny\" src={value.avatar_url} />\n                <Item.Content verticalAlign=\"middle\">\n                  <Item.Header>\n                    <Icon name=\"github alternate\" />\n                    {value.login}\n                  </Item.Header>\n                  <Item.Extra>\n                    <Icon name=\"numbered list\" />\n                    {value.id}\n                  </Item.Extra>\n                  <Button as={Link} to={`/user/${value.login}`} basic color='blue' floated='right'>\n                    More info\n                    <Icon name='right chevron' />\n                  </Button>\n                </Item.Content>\n              </Item>\n            ))}\n          </Item.Group>\n        </Segment>\n        { page > 1 && <Button as={Link} to={`/users/${(parseInt(page) - 1)}`} onClick={() => window.scrollTo(0, 0)} secondary icon labelPosition='left'><Icon name='left arrow' />Previous</Button> }\n        <Button as={Link} to={`/users/${(parseInt(page) + 1)}`} onClick={() => window.scrollTo(0, 0)} primary icon labelPosition='right'>Next<Icon name='right arrow' /></Button>\n      </>\n    )\n  } else {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted />\n      </Dimmer>\n    )\n  }\n}\n\nexport default Users;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Dimmer, Loader, Card, Icon, Image } from 'semantic-ui-react';\nimport Moment from 'react-moment';\n\nconst User = () => {\n  const { username } = useParams();\n  const [user, setUser] = useState({});\n  \n  const getUser = async () => {\n    await fetch('/api/auth');\n    \n    const response = await fetch(`/api/users/${username}/details`);\n    const body = await response.json();\n    \n    if (response.status !== 200) throw Error(body.message);\n    \n    setUser(body);\n  }\n\n  useEffect(() => { getUser() }); \n  \n  console.log(user);\n  // if(Object.keys(user).length === 0 && user.constructor === Object){\n    return (\n      <Card centered style={{marginTop: '50px'}}>\n        <Image src={user.avatar_url} wrapped ui={false} />\n        <Card.Content>\n          <Card.Header>{user.name} || {user.login}</Card.Header>\n          <Card.Meta>\n            <span className='date'>\n              Joined in <Moment format=\"MM/DD/YYYY\">{user.created_at}</Moment>\n            </span>\n          </Card.Meta>\n          <Card.Description>{user.bio}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <p>\n            <Icon name='numbered list' />\n            {user.id}\n          </p>\n          { user.location && <p>\n            <Icon name='map outline' />\n            {user.location}\n          </p> }\n          { user.company && <p>\n            <Icon name='building outline' />\n            {user.company}\n          </p> }\n          { user.html_url && <p>\n            <a href={user.html_url} target=\"_blank\">\n              <Icon name='github' />\n              {user.html_url}\n            </a>\n          </p> }\n          { user.blog && <p>\n            <a href={user.blog} target=\"_blank\">\n              <Icon name='blogger' />\n              {user.blog}\n            </a>\n          </p> }\n          { user.twitter_username && <p>\n            <Icon name='twitter' />\n            {user.twitter_username}\n          </p> }\n        </Card.Content>\n      </Card>\n    )\n  // } else {\n  //   return (\n  //     <Dimmer active inverted>\n  //       <Loader inverted />\n  //     </Dimmer>\n  //   )\n  // }\n}\n\nexport default User;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { Container, Segment, Header, Icon } from 'semantic-ui-react';\nimport Home from './Home';\nimport Users from './Users';\nimport User from './User';\n\nconst App = () => {\n  return (\n    <Router>\n      <Container style={{padding: '10px 0'}}>\n        <Segment style={{minHeight: 'calc(100vh - 20px)'}}>\n          <Header as=\"h1\" textAlign=\"center\" icon>\n            <Icon name=\"code\" />\n            Challenge - GitHub API\n          </Header>\n          <Switch>\n            <Route path=\"/user/:username\" children={<User />} />\n            <Route path=\"/users/:page?\" children={<Users />} />\n            <Route path=\"/\" children={<Home />} />\n          </Switch>\n        </Segment>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}